"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const system_js_1 = __importDefault(require("./system.js"));
const api_1 = __importDefault(require("./api"));
class SupervisorApi extends api_1.default {
    constructor() {
        super(...arguments);
        this.basename = 'supervisor';
    }
    createSystemApi() {
        return new system_js_1.default(this.client);
    }
    addProcessGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('addProcessGroup', [name]);
        });
    }
    clearAllProcessLogs() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('clearAllProcessLogs');
        });
    }
    clearLog() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('clearLog');
        });
    }
    clearProcessLog(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('clearProcessLog', [name]);
        });
    }
    clearProcessLogs() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('clearProcessLogs');
        });
    }
    getAPIVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getAPIVersion');
        });
    }
    getAllConfigInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getAllConfigInfo');
        });
    }
    getAllProcessInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getAllProcessInfo');
        });
    }
    getIdentification() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getIdentification');
        });
    }
    getPID() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getPID');
        });
    }
    getProcessInfo(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getProcessInfo', [name]);
        });
    }
    getState() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getState');
        });
    }
    getSupervisorVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getSupervisorVersion');
        });
    }
    /**
     * @deprecated
     */
    getVersion() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('getVersion');
        });
    }
    readLog(offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('readLog', [offset, length]);
        });
    }
    readMainLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('readMainLog', [name, offset, length]);
        });
    }
    readProcessLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('readProcessLog', [name, offset, length]);
        });
    }
    readProcessStderrLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('readProcessStderrLog', [name, offset, length]);
        });
    }
    readProcessStdoutLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('readProcessStdoutLog', [name, offset, length]);
        });
    }
    reloadConfig() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('reloadConfig');
        });
    }
    removeProcessGroup(name) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('removeProcessGroup', [name]);
        });
    }
    restart() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('restart');
        });
    }
    sendProcessStdin(name, chars) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('sendProcessStdin', [name, chars]);
        });
    }
    sendRemoteCommEvent(type, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('sendRemoteCommEvent', [type, data]);
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('shutdown');
        });
    }
    signalAllProcesses(signals) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('signalAllProcesses', [signals]);
        });
    }
    signalProcess(name, signal) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('signalProcess', [name, signal]);
        });
    }
    signalProcessGroup(name, signal) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('signalProcessGroup', [name, signal]);
        });
    }
    startAllProcesses(wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('startAllProcesses', [wait]);
        });
    }
    startProcess(name, wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('startProcess', [name, wait]);
        });
    }
    startProcessGroup(name, wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('startProcessGroup', [name, wait]);
        });
    }
    stopAllProcesses(wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('stopAllProcesses', [wait]);
        });
    }
    stopProcess(name, wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('stopProcess', [name, wait]);
        });
    }
    stopProcessGroup(name, wait = true) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('stopProcessGroup', [name, wait]);
        });
    }
    tailProcessLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('tailProcessLog', [name, offset, length]);
        });
    }
    tailProcessStderrLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('tailProcessStderrLog', [name, offset, length]);
        });
    }
    tailProcessStdoutLog(name, offset, length) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.call('tailProcessStdoutLog', [name, offset, length]);
        });
    }
}
exports.default = SupervisorApi;
