import SystemApi from './system.js';
import Api from './api';
import { ConfigInfo, ProcessInfo, Signal, SupervisorState } from "./types";
export default class SupervisorApi extends Api {
    basename: string;
    createSystemApi(): SystemApi;
    addProcessGroup(name: string): Promise<boolean>;
    clearAllProcessLogs(): Promise<ProcessInfo[]>;
    clearLog(): Promise<boolean>;
    clearProcessLog(name: string): Promise<true>;
    clearProcessLogs(): Promise<boolean>;
    getAPIVersion(): Promise<string>;
    getAllConfigInfo(): Promise<ConfigInfo[]>;
    getAllProcessInfo(): Promise<ProcessInfo[]>;
    getIdentification(): Promise<string>;
    getPID(): Promise<number>;
    getProcessInfo(name: string): Promise<ProcessInfo>;
    getState(): Promise<SupervisorState>;
    getSupervisorVersion(): Promise<string>;
    /**
     * @deprecated
     */
    getVersion(): Promise<string>;
    readLog(offset: number, length: number): Promise<string>;
    readMainLog(name: string, offset: number, length: number): Promise<string>;
    readProcessLog(name: string, offset: number, length: number): Promise<string>;
    readProcessStderrLog(name: string, offset: number, length: number): Promise<string>;
    readProcessStdoutLog(name: string, offset: number, length: number): Promise<string>;
    reloadConfig(): Promise<Array<string[]>>;
    removeProcessGroup(name: string): Promise<boolean>;
    restart(): Promise<boolean>;
    sendProcessStdin(name: string, chars: string): Promise<true>;
    sendRemoteCommEvent(type: string, data: string): Promise<true>;
    shutdown(): Promise<boolean>;
    signalAllProcesses(signals: Signal): Promise<ProcessInfo[]>;
    signalProcess(name: string, signal: Signal): Promise<boolean>;
    signalProcessGroup(name: string, signal: Signal): Promise<boolean[]>;
    startAllProcesses(wait?: boolean): Promise<ProcessInfo>;
    startProcess(name: string, wait?: boolean): Promise<boolean>;
    startProcessGroup(name: string, wait?: boolean): Promise<ProcessInfo>;
    stopAllProcesses(wait?: boolean): Promise<ProcessInfo>;
    stopProcess(name: string, wait?: boolean): Promise<boolean>;
    stopProcessGroup(name: string, wait?: boolean): Promise<any>;
    tailProcessLog(name: string, offset: number, length: number): Promise<string>;
    tailProcessStderrLog(name: string, offset: number, length: number): Promise<string>;
    tailProcessStdoutLog(name: string, offset: number, length: number): Promise<string>;
}
