"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRpcClient = exports.getFullMethodName = void 0;
const xmlrpc_1 = __importDefault(require("xmlrpc"));
function getFullMethodName(baseName, method) {
    return [baseName, method].join('.');
}
exports.getFullMethodName = getFullMethodName;
function makeRpcClient(options) {
    options = options || {};
    if (!options.host) {
        throw new Error('Host for Supervisor is invalid.');
    }
    if (!options.port) {
        throw new Error('Port for Supervisor is invalid.');
    }
    const clientOptions = {
        host: options.host,
        path: options.path,
        port: options.port,
    };
    if (options.username && options.password) {
        Object.assign(clientOptions, clientOptions, {
            basic_auth: {
                user: options.username,
                pass: options.password,
            }
        });
    }
    // @ts-ignore
    return xmlrpc_1.default.createClient(clientOptions);
}
exports.makeRpcClient = makeRpcClient;
